Problem Statement #
Given a string with lowercase letters only, if you are allowed to replace no more than ‘k’ letters with any letter, find the length of the longest substring having the same letters after replacement.




substr:
char with highest frequency
frequency of other char if frequency of other char = k
this is the string to return of which length

all count - highest frequency:
 1) == k: record max_len
 2) < k
 3) > k: move the sliding window 


# Code
def length_of_longest_substring(str, k):
    window_start, max_len, max_repeat_letter = 0, 0, 0
    frequency = {}
    
    for window_end in range(len(str)):
        right_char = str[window_end]
        
        if right_char not in frequency:
            frequency[right_char] = 1
        frequency[right_char] += 1
        
        max_repeat_letter = max(max_repeat_letter, frequency[right_char])
        
        if window_end - window_start + 1 - max_repeat_letter > k:
            left_char = str[window_start]
            frequency[left_char] -= 1
            window_start += 1
        

     max_len = max(max_len, window_end - window_start + 1)
        
    return max_len
        