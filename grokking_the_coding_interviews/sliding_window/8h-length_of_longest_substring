Problem Statement #
Given an array containing 0s and 1s, if you are allowed to replace no more than ‘k’ 0s with 1s, find the length of the longest contiguous subarray having all 1s.

keep track of subarray that satisfy these requirements:
    frequency of 0 <= k
    frequency of 1-highest
    
    while count 0 > k, shrink sliding window

    
    update max_len


# Code
def length_of_longest_substring(arr, k):
    window_start, max_len, max_one_count = 0,0,0
    
    for window_end in range(len(arr)):
        if arr[window_end] == 1:
            max_one_count += 1
        
        if window_end - window_start + 1 - max_one_count > k:   
            if arr[window_start] == 1:
                max_one_count -= 1
            window_start += 1
        max_len = max(max_len, window_end - window_start + 1)
    return max_len

